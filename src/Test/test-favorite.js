const axios = require('axios');
const https = require('https');

// ‚öôÔ∏è B·ªè qua ch·ª©ng ch·ªâ HTTPS t·ª± k√Ω
const httpsAgent = new https.Agent({ rejectUnauthorized: false });

const API_BASE = 'https://localhost:7153/api';
let token = '';
const userId = 2;        // ‚úÖ ID ng∆∞·ªùi d√πng trong DB
const songIdToTest = 6;  // ‚úÖ ID b√†i h√°t h·ª£p l·ªá trong DB

// 1. ƒêƒÉng nh·∫≠p user th∆∞·ªùng
async function loginUser() {
  const res = await axios.post(`${API_BASE}/auth/login`, {
    email: 'nguyenvanan@gmail.com',
    password: 'an123456'
  }, { httpsAgent });

  token = res.data.token;
  console.log('üîê ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
}

// 2. Th√™m b√†i h√°t v√†o danh s√°ch y√™u th√≠ch
async function addFavorite() {
  const res = await axios.post(`${API_BASE}/favorite/${songIdToTest}`, null, {
    headers: { Authorization: `Bearer ${token}` },
    httpsAgent
  });

  console.log('‚ù§Ô∏è ƒê√£ th√™m v√†o y√™u th√≠ch:', res.data);
}

// 3. Ki·ªÉm tra b√†i h√°t ƒë√£ ƒë∆∞·ª£c y√™u th√≠ch ch∆∞a
async function checkFavorite() {
  const res = await axios.get(`${API_BASE}/favorite/check/${songIdToTest}`, {
    headers: { Authorization: `Bearer ${token}` },
    httpsAgent
  });

  console.log(`üîç B√†i h√°t ${songIdToTest} ƒë√£ ƒë∆∞·ª£c y√™u th√≠ch?`, res.data);
}

// 4. L·∫•y danh s√°ch b√†i h√°t y√™u th√≠ch
async function getUserFavorites() {
  const res = await axios.get(`${API_BASE}/favorite/${userId}`, {
    httpsAgent
  });

  console.log(`üéß Danh s√°ch y√™u th√≠ch c·ªßa user ${userId}:`, res.data.map(s => s.Title || s.title));
}

// 5. X√≥a b√†i h√°t kh·ªèi danh s√°ch y√™u th√≠ch
async function removeFavorite() {
  const res = await axios.delete(`${API_BASE}/favorite/${songIdToTest}`, {
    headers: { Authorization: `Bearer ${token}` },
    httpsAgent
  });

  console.log('üóëÔ∏è ƒê√£ xo√° kh·ªèi y√™u th√≠ch:', res.data);
}

// ========================
// TH·ª∞C THI TO√ÄN B·ªò
// ========================
(async () => {
  try {
    await loginUser();
    await addFavorite();
    await checkFavorite();
    await getUserFavorites();
    await removeFavorite();
  } catch (err) {
    console.error('‚ùå L·ªói:', err.response?.data || err.message);
  }
})();
